package Core;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;

public class ServerWorkerThread implements Runnable{
	P2PLogger logger;
	private Socket connectionSocket;//Socket generated by TCP
	private boolean kill = false;
	private int peer = -1; //TODO 
	
	//Constructor
	public ServerWorkerThread(Socket connectionSocket) throws IOException {
		if(connectionSocket!=null) {
			this.connectionSocket = connectionSocket;
		}else {
			throw new IOException("IOExcepion: Assigned connection socket "
										+ "doesn't exist.");
		}
	}
	
	// Setter for killer flag to stop listening
	public void setKill() {
		this.kill = true;
	}
	
	// Send handshake msg
	public void sendHandShake(DataOutputStream outStream) throws IOException {
		String handShakeMsg = new HandShakeMessage(ServerThreadPool.getPeerID())
																	.toString();
		outStream.writeBytes(handShakeMsg);
	}
	
	// Wait until handshake
	public boolean getHandshake(InputStream inStream) {
		try {
			this.logger.setPeerInfo(ServerThreadPool.getPeerID());
			this.logger.append(String.format("Awaiting handShake info from Peer."));		
			//TODO Read opposite peer and set
			while(inStream.available() < HandShakeMessage.getLength()) {
				
			}
			byte[] handShakeByte = new byte[HandShakeMessage.getLength()];
			inStream.read(handShakeByte);
			//TODO update peer 
			
			// Check handShakeByte encoded to be String

			
			return true;
		} catch (IOException e) {
			// TODO p2plogger log exception
			e.printStackTrace();
		}
		
		return false;
	}
	
	
	@Override
	public void run() {
		try {
			logger = new P2PLogger();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			InputStream instream = connectionSocket.getInputStream();
			InputStreamReader InputFromClient = new InputStreamReader(
											connectionSocket.getInputStream());
			BufferedReader connectionInStream = new BufferedReader(InputFromClient);
			String handShakeReq = connectionInStream.readLine();
			//Create output stream for response
			OutputStream output = connectionSocket.getOutputStream();
			DataOutputStream writeToClientStream = new DataOutputStream(output);
			//SendOutput
			sendHandShake(writeToClientStream);
			
			//Encapsulate handshake message
			HandShakeMessage hsm = new HandShakeMessage(handShakeReq);
			//If handshake field doesn't pass, close the connection
			if(!hsm.permitToConnect()) {
				connectionSocket.close();
				throw new IOException("Not Authorized: Server closed the connection.");
			}
			do {
				// TODO ReadInfo
			}while(!kill);
			
			
			//Write back actual message
			writeToClientStream.writeBytes("ACTUAL MESSAGE");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				connectionSocket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
}
